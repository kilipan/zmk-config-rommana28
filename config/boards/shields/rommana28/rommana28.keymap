#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define APT 0
#define NUM 1
#define NAV 2
#define SYM 3
#define FUN 4
#define BLE 5

// &lt {
//     quick_tap_ms = <170>;
// };

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC LSHFT RSHFT>;
};

/ {
    macros {
        macro_sch: macro_sch {
            label = "Macro_sch";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
		    &macro_tap &kp S
		    &macro_release &kp LSHIFT
		    &macro_tap &kp C &kp H
	    >;
        };
        macro_eu: macro_eu {
            label = "Macro_eu";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
		    &macro_tap &kp E &kp U
	    >;
        };
        macro_oa: macro_oa {
            label = "Macro_oa";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
		    &macro_tap &kp O &kp A
	    >;
        };
        macro_space_oss: macro_space_oss {
            label = "Macro_Space_OSS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp SPACE>
                , <&macro_tap &sk LSFT>
                ;
        };
        macro_de_ae: macro_de_ae {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp DQT>
                , <&macro_release &kp RALT>
                , <&macro_tap &kp A>                   
                ;
            tap-ms = <10>;
        };
        macro_de_oe: macro_de_oe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp DQT>
                , <&macro_release &kp RALT>
                , <&macro_tap &kp O>                   
                ;
            tap-ms = <10>;
        };
        macro_de_ue: macro_de_ue {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp DQT>
                , <&macro_release &kp RALT>
                , <&macro_tap &kp U>                   
                ;
            tap-ms = <10>;
        };
        macro_de_sz: macro_de_sz {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp S>
                , <&macro_release &kp RALT>
                ;
            tap-ms = <10>;
        };
    };
};


#define COMBO(NAME, BINDINGS, KEYPOS) \
combo_##NAME { \
    timeout-ms = <20>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
};

/ {
    combos {
        compatible = "zmk,combos";
/* usually on base layer */
        COMBO(q, &kp Q, 1 2)
     //   COMBO(z, &kp Z, 18 19)
        COMBO(x, &kp X, 18 19)
        COMBO(b, &kp B, 0 1)
     //   COMBO(v, &kp V, 0 1)
     //   COMBO(_ae, &kp RA(A), 15 26)
     //   COMBO(_oe, &kp RA(O), 17 26)
     //   COMBO(_ue, &kp RA(U), 6 26)
        COMBO(_ae, &macro_de_ae, 15 26)
        COMBO(_oe, &macro_de_oe, 6 26)
        COMBO(_ue, &macro_de_ue, 7 26)
        COMBO(_sz, &macro_de_sz, 9 25)
        COMBO(sch, &macro_sch, 0 2)
        COMBO(eu, &macro_eu, 14 16)
     //   COMBO(oa, &macro_oa, 6 15)
        COMBO(slash, &kp SLASH, 22 23)
        COMBO(dash, &kp MINUS, 21 22)
        COMBO(enter, &kp ENTER, 21 23)
        COMBO(esc, &kp ESC, 19 20)
/* parentheticals */
        COMBO(lbrc, &kp LBRC, 0 9)
        COMBO(lbkt, &kp LBKT, 1 10)
        COMBO(lpar, &kp LPAR, 2 11)
        COMBO(lt, &kp LT, 3 12)
        COMBO(gt, &kp GT, 4 13)
        COMBO(rpar, &kp RPAR, 5 14)
        COMBO(rbkt, &kp RBKT, 6 15)
        COMBO(rbrc, &kp RBRC, 7 16)
/* caps */
        COMBO(caps, &caps_word, 11 14)
        COMBO(capslock, &kp CAPSLOCK, 0 7)
/* deletion */
        COMBO(bspc, &kp BSPC, 5 6)
        COMBO(del, &kp DEL, 6 7)
        COMBO(delword, &kp LC(BSPC), 5 7)
/* alternative shifting */
        COMBO(Scomma, &kp COLON, 22 27)
        COMBO(Sdot, &kp SEMI, 23 27)
    };
};

//     __________________________  __________________________
//    /     0  |  1  |  2  |  3  \/   4 |   5 |   6 |   7    \
// |  8  |  9  | 10  | 11  | 12  /\  13 |  14 |  15 |  16 | 17  |
//    \    18  | 19  | 20    /        \    21 |  22 |  23   /
//          \    24  | 25  /            \  26 |  27    /
//           --------------              --------------


/ {

    behaviors {
        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <4 5 6 7 13 14 15 16 17 21 22 23 24 25 26 27>;
        };
        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <0 1 2 3 8 9 10 11 12 18 19 20 24 25 26 27>;
        };

        my_lt: my_layer_taps {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&mo>, <&kp>;
            // non-thumb keys
            // hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23>;
        };
        sposs_lt: sposs_lt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&mo>, <&macro_space_oss>;
            // non-thumb keys
            // hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23>;
        };

        dotcol: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COL";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comsem: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COM_SEM";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};


// Rommana28 physical layout approximation
//     __________________________  __________________________
//    /     0  |  1  |  2  |  3  \/   4 |   5 |   6 |   7    \
// |  8  |  9  | 10  | 11  | 12  /\  13 |  14 |  15 |  16 | 17  |
//    \    18  | 19  | 20    /        \    21 |  22 |  23   /
//          \    24  | 25  /            \  26 |  27    /
//           --------------              --------------

/ {

    keymap {
        compatible = "zmk,keymap";

        // aptmak {
        //     label = "APT";
        //     bindings = <
        //                        &kp W          &kp F          &kp P          &kp Z          &kp J          &kp L          &kp U          &kp Y
        //         &hl LCTRL R    &hl LALT S     &hl LGUI T     &hl LSHFT H    &hl RALT K     &hr RALT X     &hr RSHFT N    &hr RGUI A     &hr LALT I     &hr RCTRL O
        //                        &kp C          &kp G          &kp D                                        &kp M          &comsem        &dotcol
        //                                                      &my_lt NUM SQT &my_lt NAV SPACE &my_lt SYM E &my_lt FUN TAB
        //     >;
        // };
        naught {
            label = "NGT";
            bindings = <
                               &kp F          &kp L          &kp K          &kp Z          &kp P            &kp G          &kp O          &kp U
                &hl LCTRL N    &hl LALT S     &hl LGUI H     &hl LSHFT T    &hl RALT M     &hr RALT Y       &hr RSHFT C    &hr RGUI A     &hr LALT E     &hr RCTRL I
                               &kp V          &kp J          &kp D                                          &kp W          &dotcol        &comsem
                                                             &my_lt NUM TAB &my_lt NAV R   &my_lt SYM SPACE &my_lt FUN SQT
            >;
        };
        numbers {
            label = "NUM";

            bindings = <
                              &kp N9      &kp N8      &kp N7       &kp PLUS       &kp PLUS       &kp N7         &kp N8         &kp N9
                &hl LCTRL DOT &hl LALT N6 &hl LGUI N5 &hl LSHFT N4 &kp N0         &none          &kp N4         &kp N5         &kp N6         &kp DOT
                              &kp N3      &kp N2      &kp N1                                     &kp N1         &kp N2         &kp N3
                                                      &trans       &trans         &kp E          &kp N0
            >;
        };
        navigation {
            label = "NAV";

            bindings = <
                               &none          &none          &none           &kp PG_UP      &kp LC(X)      &kp LC(INSERT) &kp LS(INSERT) &kp INSERT
                &sk LCTRL      &sk LALT       &sk LGUI       &sk LSHFT       &kp PG_DN      &kp LEFT       &kp DOWN       &kp UP         &kp RIGHT  &none
                               &kp LC(C)      &kp LC(X)      &kp LC(V)                                     &kp HOME       &kp C_MUTE     &kp END
                                                             &trans          &trans         &kp C_VOL_DN   &kp C_VOL_DN
            >;
        };
        symbols {
            label = "SYM";

            bindings = <
                               &none          &none          &none            &none          &none          &none          &none          &none
                &kp EXCL       &kp AT         &kp HASH       &kp DOLLAR       &none          &none          &kp AMPERSAND  &kp ASTERISK   &kp PERCENT    &kp CARET
                               &kp GRAVE      &kp DQT        &kp UNDERSCORE                                 &kp BACKSLASH  &kp PIPE       &kp EQUAL
                                                             &kp TILDE        &trans         &trans         &trans
            >;
        };
        function {
            label = "FUN";

            bindings = <
                               &bootloader    &trans         &bt BT_CLR_ALL &bt BT_PRV     &kp F12        &kp F7         &kp F8         &kp F9
                &bootloader    &kp F12        &kp F11        &kp F10        &bt BT_NXT     &kp F11        &kp F4         &kp F5         &kp F6         &kp F10
                               &kp F9         &kp F8         &kp F7                                       &kp F1         &kp F2         &kp F3
                                                             &out OUT_TOG   &trans         &trans         &trans
            >;
        };
    };
};

//     __________________________  __________________________
//    /     1  |  2  |  3  |  4  \/   5 |   6 |   7 |   8    \
// | 10  | 11  | 12  | 13  | 14  ||  15 |  16 |  17 |  18 | 19  |
//    \    20  | 21  | 22  |     ||     |  23 |  24 |  25   /
//                \    26  | 27  /\  28 |  29    /
//                 --------------  --------------
